<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>YOLO-World Docker 环境配置与使用指南</title>
      <link href="/2025/10/13/YOLO-World-Docker-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2025/10/13/YOLO-World-Docker-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="YOLO-World-Docker-环境配置与使用指南"><a href="#YOLO-World-Docker-环境配置与使用指南" class="headerlink" title="YOLO-World Docker 环境配置与使用指南"></a>YOLO-World Docker 环境配置与使用指南</h1><blockquote><p>作者：zzy-swimming<br>指导：</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>#前言</li><li>#查看电脑状况</li><li>#核心概念与软件清单<ul><li>#31-所需软件组件</li><li>#32-为什么需要-wsl-2</li></ul></li><li>#安装与配置wsl2<ul><li>#41-启用-wsl-和虚拟机平台功能</li><li>#42-安装-linux-发行版</li><li>#43-安装-wsl-2-linux-内核更新包</li><li>#44-将-wsl-2-设置为默认版本</li><li>#45-检查当前wsl状态</li></ul></li><li>#安装-docker-desktop<ul><li>#51-前提条件</li><li>#52-下载安装程序</li><li>#53-安装过程</li><li>#54-验证安装</li><li>#55-配置国内镜像加速器</li></ul></li><li>#使用-docker-复现-yolo-world<ul><li>#61-拉取-ultralytics-镜像</li><li>#62-准备本地目录</li><li>#63-启动容器并挂载目录</li><li>#64-cpu推理测试</li></ul></li><li>#配置与使用gpu环境<ul><li>#71-在您的主机系统上安装nvidia-container-toolkit</li><li>#72-验证gpu环境</li><li>#73-使用支持gpu的docker命令启动容器</li><li>#74-使用gpu运行您的yolo-world脚本</li></ul></li><li>#查看结果</li><li>#ps将ubuntu移动到f盘的操作方法</li></ol><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本文档详细介绍了在 Windows 系统上配置 YOLO-World 所需的环境和依赖。通过使用 Docker 和 WSL 2，您可以快速搭建一个稳定、高效的深度学习环境，避免复杂的本地环境配置问题。</p><h2 id="2-查看电脑状况"><a href="#2-查看电脑状况" class="headerlink" title="2. 查看电脑状况"></a>2. 查看电脑状况</h2><p>深度学习的训练对于电脑显卡要求较高，若电脑没有独立显卡（NVIDIA卡）或者是AMD的显卡无法使用GPU进行训练，需用CPU进行训练，会慢很多。若不清楚电脑有无显卡可以打开任务管理器，点击性能往下找GPU，就可以看到是否有独立显卡，不清楚是否为独立显卡则搜索型号。</p><h2 id="3-核心概念与软件清单"><a href="#3-核心概念与软件清单" class="headerlink" title="3. 核心概念与软件清单"></a>3. 核心概念与软件清单</h2><h3 id="3-1-所需软件组件"><a href="#3-1-所需软件组件" class="headerlink" title="3.1 所需软件组件"></a>3.1 所需软件组件</h3><p><strong>一、系统功能组件（Windows 功能）</strong></p><ul><li>Windows Subsystem for Linux (WSL)：用于在 Windows 上运行 Linux 环境的核心功能。</li><li>虚拟机平台 (Virtual Machine Platform)：WSL 2 依赖的底层虚拟化功能。</li></ul><p><strong>二、核心软件</strong></p><ul><li>一个 Linux 发行版 (Linux Distribution)：例如从 Microsoft Store 安装的 Ubuntu (推荐 LTS 版本，如 22.04)。</li><li>WSL 2 Linux 内核更新包 (wsl_update_x64.msi)：确保 WSL 2 正常运行的微软官方内核补丁。</li><li>Docker Desktop for Windows：管理和运行 Docker 容器的主要软件。</li></ul><h3 id="3-2-为什么需要-WSL-2"><a href="#3-2-为什么需要-WSL-2" class="headerlink" title="3.2 为什么需要 WSL 2"></a>3.2 为什么需要 WSL 2</h3><p>在现代 Windows 系统上运行 Docker 有两种传统模式：</p><ul><li>Docker Toolbox（已废弃）：基于 VirtualBox 虚拟机，性能差，体验不佳</li><li>Hyper-V 后端：使用 Windows 的 Hyper-V 虚拟化技术创建轻量级 Linux VM</li></ul><p>现在，Docker Desktop 官方强烈推荐并默认使用 WSL 2 作为后端，原因如下：</p><p><strong>性能巨大提升：</strong></p><ul><li>文件系统访问：在 WSL 2 中，对绑定挂载的 Windows 文件的读写速度远超传统的 Hyper-V VM 模式</li><li>启动时间：WSL 2 的启动几乎是瞬时的</li></ul><p><strong>更好的资源集成：</strong></p><ul><li>WSL 2 可以更智能地与 Windows 共享 CPU、内存和存储资源</li></ul><p><strong>无缝体验：</strong></p><ul><li>可以在 Windows 终端和 WSL 2 的 Linux 终端之间无缝切换</li></ul><h2 id="4-安装与配置WSL2"><a href="#4-安装与配置WSL2" class="headerlink" title="4. 安装与配置WSL2"></a>4. 安装与配置WSL2</h2><h3 id="4-1-启用-WSL-和虚拟机平台功能"><a href="#4-1-启用-WSL-和虚拟机平台功能" class="headerlink" title="4.1 启用 WSL 和虚拟机平台功能"></a>4.1 启用 WSL 和虚拟机平台功能</h3><p>以管理员身份打开 Windows PowerShell 或命令提示符(CMD)，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用&quot;Windows Subsystem for Linux&quot;功能</span></span><br><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用&quot;虚拟机平台&quot;功能（WSL 2的核心要求）</span></span><br><span class="line">dism.exe /enable-feature /online /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>完成后，按照提示重启电脑。</p><blockquote><p><strong>注意</strong>：您注意到没有重启提示，这是因为您使用了 <code>/norestart</code>参数。这个参数的作用是：<br><code>/norestart</code> &#x3D; “不重启” (No Restart)<br>这个参数明确告诉系统：”完成这个操作后，不要自动重启电脑”</p></blockquote><p>完成后，<strong>手动重启电脑</strong>。</p><h3 id="4-2-安装-Linux-发行版"><a href="#4-2-安装-Linux-发行版" class="headerlink" title="4.2 安装 Linux 发行版"></a>4.2 安装 Linux 发行版</h3><ol><li>打开 Microsoft Store 应用</li><li>搜索 “Ubuntu”（或 “Debian” 等其他发行版）</li><li>选择最新的 Ubuntu LTS 版本（例如 Ubuntu 22.04 LTS），点击”获取”或”安装”</li><li>安装完成后，从开始菜单启动它，设置 UNIX 用户名和密码</li></ol><h3 id="4-3-安装-WSL-2-Linux-内核更新包"><a href="#4-3-安装-WSL-2-Linux-内核更新包" class="headerlink" title="4.3 安装 WSL 2 Linux 内核更新包"></a>4.3 安装 WSL 2 Linux 内核更新包</h3><ol><li>访问微软官方下载页面：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a></li><li>下载并运行 <code>wsl_update_x64.msi</code>安装程序</li><li>按照提示完成安装</li></ol><blockquote><p><strong>问题一</strong>：实际操作中，我把安装Linux发行版这一步骤忘记了，在安装WSL2 Linux内核更新包时，出现了如下图所示的报错。</p><p>[图片: WSL2内核更新包安装错误截图]</p><p><strong>错误原因</strong>：我跳过了安装 WSL 发行版的步骤，直接尝试安装 WSL 2 内核更新包。但系统检测到您还没有安装任何 WSL 发行版（如 Ubuntu），所以拒绝安装更新。</p></blockquote><h3 id="4-4-将-WSL-2-设置为默认版本"><a href="#4-4-将-WSL-2-设置为默认版本" class="headerlink" title="4.4 将 WSL 2 设置为默认版本"></a>4.4 将 WSL 2 设置为默认版本</h3><p>打开 PowerShell（无需管理员权限），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>此命令会告诉系统，以后任何新安装的 Linux 发行版都默认使用 WSL 2。</p><h3 id="4-5-检查当前WSL状态"><a href="#4-5-检查当前WSL状态" class="headerlink" title="4.5 检查当前WSL状态"></a>4.5 检查当前WSL状态</h3><p>在PowerShell中运行以下命令，查看当前的WSL配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查WSL状态和版本</span></span><br><span class="line">wsl --status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装的发行版</span></span><br><span class="line">wsl --list --verbose</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题二</strong>：在实际操作过程中，我跳过了WSL2更新包，直接进入下一步安装 Docker Desktop。</p><p>因为我的系统显示 <code>默认版本：2</code>，这证明 WSL 2 已经成功启用。可能的情况是：</p><ul><li>Windows 更新已经自动安装了所需的组件</li><li>或者 Docker Desktop 安装程序会自动处理剩余依赖</li></ul><p>目前我仍未可知跳过WSL2更新包的具体原因。</p></blockquote><h2 id="5-安装-Docker-Desktop"><a href="#5-安装-Docker-Desktop" class="headerlink" title="5. 安装 Docker Desktop"></a>5. 安装 Docker Desktop</h2><h3 id="5-1-前提条件"><a href="#5-1-前提条件" class="headerlink" title="5.1 前提条件"></a>5.1 前提条件</h3><ul><li>Windows 10 版本 2004 及以后或 Windows 11</li><li>开启 BIOS&#x2F;UEFI 中的虚拟化支持（Intel VT-x&#x2F;AMD-V）</li><li>确保开启 Hyper-V 和容器功能</li></ul><h3 id="5-2-下载安装程序"><a href="#5-2-下载安装程序" class="headerlink" title="5.2 下载安装程序"></a>5.2 下载安装程序</h3><p>访问 Docker 官网的 Desktop 下载页面：<br><a href="https://www.docker.com/products/docker-desktop/">https://www.docker.com/products/docker-desktop/</a></p><p>下载 Docker Desktop for Windows 安装程序</p><p><strong>选择 AMD64 还是 ARM64 版本的 Docker Desktop</strong>，完全取决于您电脑的CPU 处理器架构。绝大多数 Windows 电脑都使用 AMD64 架构。</p><p>要最准确地确认，您可以：</p><ol><li>按下 <code>Win + R</code>键</li><li>输入 <code>cmd</code>并按下回车，打开命令提示符</li><li>在黑色的命令提示符窗口中，输入并执行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %PROCESSOR_ARCHITECTURE%</span><br></pre></td></tr></table></figure><p>查看输出结果：</p><ul><li>如果显示 <code>AMD64</code> → 请下载 AMD64 版本。</li><li>如果显示 <code>ARM64</code> → 请下载 ARM64 版本。</li></ul><h3 id="5-3-安装过程"><a href="#5-3-安装过程" class="headerlink" title="5.3 安装过程"></a>5.3 安装过程</h3><ol><li>双击下载好的 <code>Docker Desktop Installer.exe</code></li><li>按照安装向导的提示进行，所有选项保持默认即可</li><li>安装完成后，重启电脑</li></ol><h3 id="5-4-验证安装"><a href="#5-4-验证安装" class="headerlink" title="5.4 验证安装"></a>5.4 验证安装</h3><ol><li>重启后，在开始菜单中找到并运行”Docker Desktop”</li><li>等待 Docker 服务启动（系统托盘会出现一只鲸鱼图标）</li><li>打开命令提示符(CMD)或 PowerShell，输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果安装成功，它会返回 Docker 的版本号。</p><p><strong>验证WSL2和Docker环境是否正确</strong></p><p>在 PowerShell 里运行 <code>docker run hello-world</code>来测试。如果这个命令能成功运行并打印出 “Hello from Docker!”，就证明你的整WSL2和Docker环境是完全正常的。</p><h3 id="5-5-配置国内镜像加速器"><a href="#5-5-配置国内镜像加速器" class="headerlink" title="5.5 配置国内镜像加速器"></a>5.5 配置国内镜像加速器</h3><p>为了提升拉取镜像的速度，建议配置国内镜像源。</p><ol><li>右键点击任务栏的 Docker 图标，选择 Settings。</li><li>在左侧找到 Docker Engine菜单。</li><li>在右侧的配置窗口中，添加或修改 <code>registry-mirrors</code>项。填入以下国内镜像源之一：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span> <span class="comment">// 中国科技大学</span></span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span>       <span class="comment">// 网易</span></span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span>         <span class="comment">// 百度</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>点击 Apply &amp; Restart。Docker 会保存配置并重启。</li></ol><h2 id="6-使用-Docker-复现-YOLO-World"><a href="#6-使用-Docker-复现-YOLO-World" class="headerlink" title="6. 使用 Docker 复现 YOLO-World"></a>6. 使用 Docker 复现 YOLO-World</h2><h3 id="6-1-拉取-Ultralytics-镜像"><a href="#6-1-拉取-Ultralytics-镜像" class="headerlink" title="6.1 拉取 Ultralytics 镜像"></a>6.1 拉取 Ultralytics 镜像</h3><p>打开终端，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ultralytics/ultralytics:latest</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题三</strong>：由于网络问题导致的Docker镜像拉取失败。问题三，说白了，它就是科学上网的问题。你如果拥有自己稳定的科学上网的途径，直接通过那个途径就OK。我个人在尝试了两种方法之后，其实全都遇到了网络方面的问题。像方法一里面的他让你更换镜像。实际上呢，我在更换镜像过后，发现那个镜像依然存在问题。最终我之所以能成，还是因为有维多利亚大学官方提供的VPN。虽然这个VPN限速，但是我把我的电脑搁这儿跑了一上午，也是成功的把它下载下来了。</p><p>（鉴于这个网络问题有点抽象，我把我下载下来的文件上传到one drive上面了，别人可以直接下载。链接：<a href="https://1drv.ms/f/c/1383ab78469327ac/ErHzib4j221FhN6I4nhFLyoB2XDStTJJolkQj7UT-UYUZg?e=sXkQGb%EF%BC%89">https://1drv.ms/f/c/1383ab78469327ac/ErHzib4j221FhN6I4nhFLyoB2XDStTJJolkQj7UT-UYUZg?e=sXkQGb）</a></p></blockquote><p><strong>问题三解决方案：能成的Docker方案：绕过网络抽风</strong></p><p>核心思路：换源+重试+手动构建。我们将采用一种更稳定、更可控的方法来构建Docker环境。</p><p><strong>方法一：使用国内镜像源加速拉取</strong></p><p>Docker默认从Docker Hub（国外）拉取镜像，速度慢且不稳定。我们可以配置使用国内的镜像加速器。</p><p>配置Daemon（守护进程）：</p><ol><li>右键点击任务栏的Docker图标，选择 Settings。</li><li>在左侧找到 Docker Engine菜单。</li><li>在右侧的配置窗口中，找到或添加 <code>registry-mirrors</code>项。填入以下国内常用的镜像源（可以多试几个）：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span> <span class="comment">// 中国科技大学</span></span><br><span class="line">    <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span>       <span class="comment">// 网易</span></span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span>         <span class="comment">// 百度</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>点击 Apply &amp; Restart。Docker会保存配置并重启。</li></ol><p>再次执行拉取命令：<br>配置重启后，重新打开您的CMD窗口，再次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ultralytics/ultralytics:latest</span><br></pre></td></tr></table></figure><p>这次速度应该会有显著提升。如果其中一个镜像源不稳定，请尝试修改为另一个，然后重启Docker再试。</p><p><strong>方法二：备用方案——手动构建镜像</strong></p><p>如果换源后仍然无法拉取，说明该镜像的所有国内缓存可能都有问题。我们直接自己动手，从一个纯净的Python镜像开始，一步步安装所需环境。这虽然看起来步骤多，但成功率是100%。</p><ol><li>在您的 <code>F:\yolo_world_demo</code>目录下，创建一个新文件，命名为 <code>Dockerfile</code>（没有后缀）。</li><li>用记事本或VS Code打开 Dockerfile，将以下内容复制进去：</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一个更小的官方Python镜像作为基础</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键步骤：更换pip源为清华大学源，以加速后续包下载</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ultralytics库及其核心依赖（如PyTorch、OpenCV等）</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install ultralytics</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器启动时自动进入bash</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>构建您自己的Docker镜像：<br>在CMD中，确保位于 <code>F:\yolo_world_demo</code>目录，然后执行以下命令。注意最后有一个点 <code>.</code>表示当前目录。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-yolo-world:latest .</span><br></pre></td></tr></table></figure><p>这个过程的意义：它会在本地直接从Python官方镜像开始，使用国内的pip源，一步步安装Ultralytics库。由于是分步下载多个小包，即使中断，再次构建也会继续，而不会全部重来。成功率远高于拉取一个巨大的现成镜像。</p><ol start="4"><li>使用您自己构建的镜像启动容器：<br>构建成功后，您就拥有了一个名为 <code>my-yolo-world</code>的本地镜像。现在用它来启动容器，命令和之前几乎一样：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> -v F:\yolo_world_demo:/workspace my-yolo-world:latest</span><br></pre></td></tr></table></figure><p><strong>方法三：从网盘上下载</strong></p><p>将链接中的压缩包下载到本地之后，运行如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i ultralytics-latest.tar</span><br></pre></td></tr></table></figure><p>加载完成后，运行 <code>docker images</code>就能看到这个镜像，然后就可以直接使用之前运行的命令来启动容器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> -v F:\yolo_world_demo:/workspace my-yolo-world:latest</span><br></pre></td></tr></table></figure><p><strong>进入容器后怎么做？</strong></p><p>无论您通过第一步还是第二步成功进入了容器（看到 <code>root@xxxx:/workspace#</code>提示符），接下来的步骤都是一样的，而且非常简单：</p><p>[图片: 成功进入容器截图]</p><p><strong>总结</strong>：请优先尝试第一步的换源方案，如果不行，第二步的手动构建方案是100%能走通的，因为它将一个大问题分解成了无数个可以断点续传的小问题。您已经非常接近成功了，祝您好运！</p><h3 id="6-2-准备本地目录"><a href="#6-2-准备本地目录" class="headerlink" title="6.2 准备本地目录"></a>6.2 准备本地目录</h3><p>在电脑上创建文件夹用来存放代码和图片，例如 <code>F:\yolo_world_demo</code>。</p><p>在此文件夹中：</p><ol><li>放入一张测试图片，重命名为 <code>bus.jpg</code></li><li>创建一个名为 <code>test_yolo_world.py</code>的文件，内容如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLOWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize a YOLO-World model</span></span><br><span class="line">model = YOLOWorld(<span class="string">&#x27;yolov8s-world.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute inference with the YOLOv8s-world on the specified image</span></span><br><span class="line">results = model.predict(<span class="string">&#x27;bus.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show results</span></span><br><span class="line">results[<span class="number">0</span>].show()</span><br><span class="line">results[<span class="number">0</span>].save(<span class="string">&quot;result.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-3-启动容器并挂载目录"><a href="#6-3-启动容器并挂载目录" class="headerlink" title="6.3 启动容器并挂载目录"></a>6.3 启动容器并挂载目录</h3><p>在终端中，导航到刚创建的目录，然后运行启动命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> F:\yolo_world_demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器，并将当前目录挂载到容器的 /workspace</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> -v <span class="variable">$&#123;PWD&#125;</span>:/workspace ultralytics/ultralytics:latest bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入workspace</span></span><br><span class="line"><span class="built_in">cd</span> /workspace</span><br></pre></td></tr></table></figure><p>成功后会进入容器内部的 Shell，提示符变为 <code>root@...:/workspace#</code>。</p><h3 id="6-4-CPU推理测试"><a href="#6-4-CPU推理测试" class="headerlink" title="6.4 CPU推理测试"></a>6.4 CPU推理测试</h3><h4 id="6-4-1-普通检测（预定义类别）"><a href="#6-4-1-普通检测（预定义类别）" class="headerlink" title="6.4.1 普通检测（预定义类别）"></a>6.4.1 普通检测（预定义类别）</h4><p>运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_yolo_world.py</span><br></pre></td></tr></table></figure><p><strong>执行过程：</strong></p><ul><li>代码会自动从 Ultralytics 的服务器下载 <code>yolov8s-world.pt</code>模型文件</li><li>下载完成后，模型会对 <code>bus.jpg</code>进行推理</li><li>结果会显示在屏幕上，并自动保存到同一目录下，名为 <code>result.jpg</code></li></ul><h4 id="6-4-2-行人检测（自定义类别）"><a href="#6-4-2-行人检测（自定义类别）" class="headerlink" title="6.4.2 行人检测（自定义类别）"></a>6.4.2 行人检测（自定义类别）</h4><p>修改脚本：<br>用编辑器修改本地目录下的 <code>test_yolo_world.py</code>文件，在 <code>model.predict</code>行之前，加入设置自定义类别的代码。内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLOWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize a YOLO-World model</span></span><br><span class="line">model = YOLOWorld(<span class="string">&#x27;yolov8s-world.pt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom classes - 就是这行新代码！</span></span><br><span class="line">model.set_classes([<span class="string">&quot;person&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute inference with the YOLOv8s-world on the specified image</span></span><br><span class="line">results = model.predict(<span class="string">&#x27;bus.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show results</span></span><br><span class="line">results[<span class="number">0</span>].show()</span><br><span class="line">results[<span class="number">0</span>].save(<span class="string">&quot;result.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>再次运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test_yolo_world.py</span><br></pre></td></tr></table></figure><p><strong>执行过程：</strong></p><ul><li>模型不会重新下载，而是直接使用之前下载好的权重</li><li><code>model.set_classes([&quot;person&quot;])</code>将检测的词汇表设置为只包含 “person”（行人）这一类</li><li>模型将只检测图片中的行人，并忽略所有其他物体</li><li>结果保存为 <code>result.jpg</code>（覆盖上一次的结果）</li></ul><h2 id="7-配置与使用GPU环境"><a href="#7-配置与使用GPU环境" class="headerlink" title="7. 配置与使用GPU环境"></a>7. 配置与使用GPU环境</h2><h3 id="7-1-在您的主机系统上安装NVIDIA-Container-Toolkit"><a href="#7-1-在您的主机系统上安装NVIDIA-Container-Toolkit" class="headerlink" title="7.1 在您的主机系统上安装NVIDIA Container Toolkit"></a>7.1 在您的主机系统上安装NVIDIA Container Toolkit</h3><p>这是最关键的基础步骤，目的是让Docker有能力识别并使用您主机上的NVIDIA显卡。</p><p>操作如下：</p><p><strong>确认基础环境：</strong></p><ul><li>确保您的主机系统（Windows或Linux）已安装最新版的NVIDIA显卡驱动程序。</li><li>确保Docker引擎已安装并正在运行。</li></ul><p><strong>安装NVIDIA Container Toolkit：</strong></p><p>对于Linux系统（如Ubuntu），请在终端中依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加NVIDIA的软件包仓库密钥和源</span></span><br><span class="line">curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg</span><br><span class="line">curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | sed <span class="string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件包列表并安装工具包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nvidia-container-toolkit</span><br></pre></td></tr></table></figure><p>对于Windows系统：<br>您需要先安装WSL 2和Linux发行版（如Ubuntu）。然后在WSL 2的Linux环境中，执行上述Linux版的安装命令。</p><p><strong>配置Docker运行时：</strong><br>安装完成后，执行以下命令来配置Docker使用NVIDIA作为默认运行时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nvidia-ctk runtime configure --runtime=docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="7-2-验证GPU环境"><a href="#7-2-验证GPU环境" class="headerlink" title="7.2 验证GPU环境"></a>7.2 验证GPU环境</h3><p>在主机终端（不是在Docker容器里）运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>如果安装成功，您将看到一个显示您GPU型号、驱动版本、CUDA版本及当前运行进程的表格。这个命令能运行成功，是后续所有步骤的基础。</p><p>完成这一步，您就为Docker容器使用GPU打下了坚实的基础。接下来，您就可以使用 <code>docker run --gpus all</code>命令来启动支持GPU的容器了。</p><p>这是打开GPU加速大门的钥匙，请务必确保这一步成功完成。</p><h3 id="7-3-使用支持GPU的Docker命令启动容器"><a href="#7-3-使用支持GPU的Docker命令启动容器" class="headerlink" title="7.3 使用支持GPU的Docker命令启动容器"></a>7.3 使用支持GPU的Docker命令启动容器</h3><h4 id="7-3-1-请使用以下新命令来启动容器（别忘了替换您的本地路径）："><a href="#7-3-1-请使用以下新命令来启动容器（别忘了替换您的本地路径）：" class="headerlink" title="7.3.1 请使用以下新命令来启动容器（别忘了替换您的本地路径）："></a>7.3.1 请使用以下新命令来启动容器（别忘了替换您的本地路径）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 进入您的项目目录</span></span><br><span class="line"><span class="built_in">cd</span> /workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 替换 `/your/local/path` 为您的实际目录，例如 F:\yolo_world_demo 对应的路径</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --gpus all -v /your/local/path:/workspace ultralytics/ultralytics:latest bash</span><br></pre></td></tr></table></figure><p><strong>核心改动：</strong><br>加入了 <code>--gpus all</code>参数。这个参数告诉Docker，将主机所有的GPU资源暴露给这个容器使用。</p><h4 id="7-3-2-或者使用一个确定存在的、更新的-CUDA-镜像标签。请在你的-WSL-Ubuntu-终端中尝试以下命令："><a href="#7-3-2-或者使用一个确定存在的、更新的-CUDA-镜像标签。请在你的-WSL-Ubuntu-终端中尝试以下命令：" class="headerlink" title="7.3.2 或者使用一个确定存在的、更新的 CUDA 镜像标签。请在你的 WSL Ubuntu 终端中尝试以下命令："></a>7.3.2 或者使用一个确定存在的、更新的 CUDA 镜像标签。请在你的 WSL Ubuntu 终端中尝试以下命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试命令：使用一个标准且常见的标签</span></span><br><span class="line">docker run --<span class="built_in">rm</span> --runtime=nvidia --gpus all nvidia/cuda:12.0.0-base-ubuntu20.04 nvidia-smi</span><br></pre></td></tr></table></figure><p>[图片: Docker GPU测试命令执行截图]</p><p>以上是正常且积极的进度提示！说明您的 Docker GPU 环境配置正确，并且正在按预期工作。</p><p><strong>情况解读</strong></p><p>Docker 正常工作的标准流程：</p><ol><li>检测镜像：Docker 首先在您本地电脑的镜像仓库中查找 <code>nvidia/cuda:12.0.0-base-ubuntu20.04</code>这个镜像。</li><li>开始下载：因为本地没有（Unable to find image … locally），所以 Docker 自动连接到官方仓库（Docker Hub）开始下载（Pulling）这个镜像。</li><li>分层下载：Docker 镜像由多个”层”组成，截图中的 <code>5acbbc202509: Download complete</code>等行显示的是这些层的下载进度。有的层已经完成，有的正在下载。这是标准的分层下载过程。</li></ol><p><strong>总结</strong>：您发出的命令已成功触发 Docker 去获取运行所需的环境，系统正在自动配置，请耐心等待下载完成。</p><p><strong>接下来会发生什么</strong></p><p>当所有”层”下载完毕后，Docker 会自动：</p><ol><li>创建一个新的容器。</li><li>按照 <code>--gpus all</code>的设定，将您的 GPU 资源分配给这个容器。</li><li>在容器内部执行 <code>nvidia-smi</code>命令。</li></ol><p>您将在终端里看到一个熟悉的 GPU 信息表格（和您之前在 WSL 中直接运行 <code>nvidia-smi</code>的结果类似）。</p><p>命令执行完毕后，容器会按 <code>--rm</code>参数的要求自动清理退出。</p><p>只要最后能显示出 GPU 信息表格，就证明您的 Docker 与 GPU 的集成配置大功告成！</p><p>请您耐心等待命令执行完成即可。如果下载速度较慢，属于网络问题，与您的配置无关。</p><h3 id="7-4-使用GPU运行您的YOLO-World脚本"><a href="#7-4-使用GPU运行您的YOLO-World脚本" class="headerlink" title="7.4 使用GPU运行您的YOLO-World脚本"></a>7.4 使用GPU运行您的YOLO-World脚本</h3><p><strong>首先确认您的本地项目文件位置</strong></p><p>请检查您的Windows文件资源管理器，确认YOLO-World项目文件是否在 <code>F:\yolo_world_demo</code>目录中，且包含：</p><ul><li><code>test_yolo_world.py</code>脚本文件</li><li><code>bus.jpg</code>测试图片</li></ul><p><strong>重新启动Docker容器并正确挂载目录</strong></p><p>在WSL终端中执行以下命令（请替换为您的实际路径）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> --gpus all -v /mnt/f/yolo_world_demo:/workspace ultralytics/ultralytics:latest bash</span><br></pre></td></tr></table></figure><p><strong>重要说明</strong>：在WSL中访问Windows的F盘，需要使用 <code>/mnt/f/</code>路径前缀。</p><p><strong>验证目录挂载</strong></p><p>进入容器后，立即检查是否成功挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la /workspace</span><br></pre></td></tr></table></figure><p>应该能看到您的Python脚本和图片文件列表。</p><p><strong>执行YOLO-World测试</strong></p><p>确认文件存在后，运行您的测试脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /workspace</span><br><span class="line">python test_yolo_world.py</span><br></pre></td></tr></table></figure><p><strong>路径映射关系总结</strong></p><ul><li>Windows路径: <code>F:\yolo_world_demo</code></li><li>WSL中对应的路径: <code>/mnt/f/yolo_world_demo</code></li><li>Docker容器内路径: <code>/workspace</code></li></ul><h2 id="8-查看结果"><a href="#8-查看结果" class="headerlink" title="8. 查看结果"></a>8. 查看结果</h2><p>所有操作完成后，在本地电脑的挂载目录中，可以找到以下文件：</p><ul><li><code>yolov8s-world.pt</code>：下载的模型权重文件</li><li><code>bus.jpg</code>：原始测试图片</li><li><code>result.jpg</code>：结果图片，上面画着模型检测出的边界框和标签</li></ul><p>打开 <code>result.jpg</code>，即可查看模型的检测结果。</p><p>[图片: YOLO-World检测结果示例]</p><h2 id="PS：将Ubuntu移动到F盘的操作方法"><a href="#PS：将Ubuntu移动到F盘的操作方法" class="headerlink" title="PS：将Ubuntu移动到F盘的操作方法"></a>PS：将Ubuntu移动到F盘的操作方法</h2><p>好的，将 WSL 2 的 Ubuntu 发行版从 C 盘迁移到 F 盘是一个常见且有效的释放系统盘空间的方法。官方提供了非常简单的命令来完成这个操作。</p><p>请严格按照以下步骤执行，整个过程非常安全。</p><p><strong>迁移步骤</strong></p><p><strong>1. 首先，终止所有 WSL 实例</strong></p><p>在开始操作前，确保 Ubuntu 或其他 WSL 发行版没有在后台运行。以管理员身份打开 Windows PowerShell 或命令提示符 (CMD)，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>这条命令会终止所有正在运行的 WSL 发行版。</p><p><strong>2. 查看已安装的 WSL 发行版及其存放位置</strong></p><p>在 PowerShell&#x2F;CMD 中运行以下命令，查看你安装的发行版的确切名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list -v</span><br></pre></td></tr></table></figure><p>输出结果会显示所有发行版及其状态。请记下你的 Ubuntu 发行版的准确名称（例如 <code>Ubuntu</code>、<code>Ubuntu-20.04</code>或 <code>Ubuntu-22.04</code>）。</p><p><strong>3. 将目标发行版导出到一个备份文件</strong></p><p>注意：此命令会将你的整个系统（包括所有设置、文件、已安装的软件和项目）打包成一个文件。请将 <code>&lt;DistroName&gt;</code>替换为上一步中你记下的名称（例如 <code>Ubuntu-22.04</code>），并指定一个 F 盘上的路径和文件名（如 <code>F:\wsl-ubuntu-backup.tar</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> &lt;DistroName&gt; F:\wsl-ubuntu-backup.tar</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu-22.04 F:\wsl-ubuntu-backup.tar</span><br></pre></td></tr></table></figure><p>这个过程需要一些时间，请耐心等待直到命令完成。</p><p><strong>4. 注销（卸载）原来的发行版</strong></p><p><strong>警告</strong>： 此操作会删除 C 盘上的原始发行版文件。但因为你已经完成了备份，所以数据是安全的。</p><pre><code class="language-bash">wsl --unregister</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三下乡 | 探秘土馍制作 以智旅赋能乡村振兴</title>
      <link href="/2025/09/05/%E4%B8%89%E4%B8%8B%E4%B9%A1-%E6%8E%A2%E7%A7%98%E5%9C%9F%E9%A6%8D%E5%88%B6%E4%BD%9C-%E4%BB%A5%E6%99%BA%E6%97%85%E8%B5%8B%E8%83%BD%E4%B9%A1%E6%9D%91%E6%8C%AF%E5%85%B4/"/>
      <url>/2025/09/05/%E4%B8%89%E4%B8%8B%E4%B9%A1-%E6%8E%A2%E7%A7%98%E5%9C%9F%E9%A6%8D%E5%88%B6%E4%BD%9C-%E4%BB%A5%E6%99%BA%E6%97%85%E8%B5%8B%E8%83%BD%E4%B9%A1%E6%9D%91%E6%8C%AF%E5%85%B4/</url>
      
        <content type="html"><![CDATA[<div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云载愚光绘乡景，学子躬行谱新篇</title>
      <link href="/2025/09/05/%E4%BA%91%E8%BD%BD%E6%84%9A%E5%85%89%E7%BB%98%E4%B9%A1%E6%99%AF%EF%BC%8C%E5%AD%A6%E5%AD%90%E8%BA%AC%E8%A1%8C%E8%B0%B1%E6%96%B0%E7%AF%87/"/>
      <url>/2025/09/05/%E4%BA%91%E8%BD%BD%E6%84%9A%E5%85%89%E7%BB%98%E4%B9%A1%E6%99%AF%EF%BC%8C%E5%AD%A6%E5%AD%90%E8%BA%AC%E8%A1%8C%E8%B0%B1%E6%96%B0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>清凉一夏｜快来查看这份王屋山旅游攻略吧</title>
      <link href="/2025/08/05/%E6%B8%85%E5%87%89%E4%B8%80%E5%A4%8F%EF%BD%9C%E5%BF%AB%E6%9D%A5%E6%9F%A5%E7%9C%8B%E8%BF%99%E4%BB%BD%E7%8E%8B%E5%B1%8B%E5%B1%B1%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5%E5%90%A7/"/>
      <url>/2025/08/05/%E6%B8%85%E5%87%89%E4%B8%80%E5%A4%8F%EF%BD%9C%E5%BF%AB%E6%9D%A5%E6%9F%A5%E7%9C%8B%E8%BF%99%E4%BB%BD%E7%8E%8B%E5%B1%8B%E5%B1%B1%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><style>    /* 文章顶部动态渐变矩形 */.post-top-animation {  height: 120px; /* 控制高度 */  width: 100%;  background: linear-gradient(270deg, #00ff7f, #2ecc71, #1abc9c);  background-size: 600% 600%;  animation: gradientFlow 8s ease infinite;  border-radius: 4px; /* 可选圆角 */  margin-bottom: 2rem;}@keyframes gradientFlow {  0% { background-position: 0% 50% }  50% { background-position: 100% 50% }  100% { background-position: 0% 50% }}</style><div class="post-top-animation"></div>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>探王屋地质奇观，绘乡村振兴蓝图</title>
      <link href="/2025/08/01/%E6%8E%A2%E7%8E%8B%E5%B1%8B%E5%9C%B0%E8%B4%A8%E5%A5%87%E8%A7%82%EF%BC%8C%E7%BB%98%E4%B9%A1%E6%9D%91%E6%8C%AF%E5%85%B4%E8%93%9D%E5%9B%BE/"/>
      <url>/2025/08/01/%E6%8E%A2%E7%8E%8B%E5%B1%8B%E5%9C%B0%E8%B4%A8%E5%A5%87%E8%A7%82%EF%BC%8C%E7%BB%98%E4%B9%A1%E6%9D%91%E6%8C%AF%E5%85%B4%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><p>为深入探索地质资源与乡村振兴融合发展路径，近日，河南大学高级金融学院愚公智旅乡村振兴实践团赴王屋山国家地质公园开展实地考察活动。实践团通过走访调研、座谈交流等形式，系统梳理当地资源禀赋与发展痛点，为助力区域文旅融合及乡村振兴贡献智慧。<br><img src="https://b9edaf4.webp.li/docs/1756484922822.png" alt="" width="60%"><br><strong> 地质藏千年史，文脉蕴万代魂</strong><br>王屋山国家地质公园作为国家级地质遗迹保护区，以完整出露的五期地质构造、丰富的造山运动遗迹被誉为“天然地质史书”，同时承载着愚公移山精神等深厚文化内涵，兼具生态、文化与旅游开发价值。<br><img src="https://b9edaf4.webp.li/docs/1756484938933.png" alt="" width="60%"><br><strong> 访核心观实景，聚共识谋发展</strong><br>考察期间，实践团先后走访天坛山、阳台宫等核心区域，实地调研地质景观保护现状与旅游设施建设情况，详细记录园区地质特征、植被分布及文旅资源开发模式。在与公园管理处座谈中，双方就地质科普教育、生态旅游规划等议题深入交流，重点探讨如何平衡资源保护与产业发展的关系。<br><img src="https://b9edaf4.webp.li/docs/1756484336706.png" alt="" width="60%"><br><strong> 入村落听民声，献良策促融合</strong><br>为掌握乡村发展实际需求，实践团还走访了公园周边村落，通过问卷调查、入户访谈等方式，了解村民参与旅游经营的现状、收入结构及发展诉求，收集到关于民宿建设、农产品深加工等方面的一手资料。针对调研中发现的旅游配套设施不完善、村民参与度不足等问题，实践团结合金融、管理专业知识，初步形成“地质+文化+乡村”的融合发展建议方案。<br><img src="https://b9edaf4.webp.li/docs/1756484971341.png" alt="" width="60%"><br><strong> 成员谈心得悟，团队续新篇章</strong><br>实践团成员娄烜赫表示，此次考察不仅深化了对地质资源保护与乡村振兴关联的认识，更明确了金融学子服务地方发展的责任。下一步，团队将继续打磨调研成果，为推动王屋山区域资源转化与乡村振兴提供更具针对性的策略支持。<br>地质为笔书新卷，乡振兴帆启远航。此次考察，实践团既领略到了亿年地质的厚重肌理，也感知了乡村发展的鲜活脉搏。未来，团队将以调研成果为基，以专业所长为刃，持续深耕“地质+文旅+乡村”融合路径，让愚公精神在新时代乡村振兴的实践中焕发新彩，助力王屋山这片沃土在保护中发展、在发展中振兴。<br><img src="https://b9edaf4.webp.li/docs/1756484979135.png" alt="" width="60%"></p>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>踏访愚公故里 传承精神根脉</title>
      <link href="/2025/08/01/%E8%B8%8F%E8%AE%BF%E6%84%9A%E5%85%AC%E6%95%85%E9%87%8C-%E4%BC%A0%E6%89%BF%E7%B2%BE%E7%A5%9E%E6%A0%B9%E8%84%89/"/>
      <url>/2025/08/01/%E8%B8%8F%E8%AE%BF%E6%84%9A%E5%85%AC%E6%95%85%E9%87%8C-%E4%BC%A0%E6%89%BF%E7%B2%BE%E7%A5%9E%E6%A0%B9%E8%84%89/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container"> <video controls width="100%">  <source src="video.mp4" type="video/mp4"> </video> </div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><!-- <video controls width="100%">  <source src="./踏访愚公故里-传承精神根脉/video.mp4" type="video/mp4"></video> --><p>为深入挖掘愚公精神的时代价值，助力乡村文化振兴战略实施，7月31日，河南大学高级金融学院愚公智旅乡村振兴实践团赴济源市愚公村开展实地调研，通过走访村史馆、与村民交流等形式，系统梳理愚公文化传承脉络，实地感受精神赋能乡村发展的生动实践。<br><img src="https://b9edaf4.webp.li/docs/1756485431226.png" alt="" width="60%"><br><strong> 村史馆内溯根源 愚公精神入人心</strong><br>愚公村村史馆作为当地重要的文化地标，以“溯源—传承—新生”为主线，通过文物陈列、影像资料、场景复原等多元形式，全面展现“愚公移山”传说的历史渊源与精神传承。实践团成员详细了解愚公带领子孙“叩石垦壤、箕畚运于渤海之尾”的传说典故，以及不同历史时期村民传承“艰苦奋斗、久久为功”精神的真实历程。<br><img src="https://b9edaf4.webp.li/docs/1756485442087.png" alt="" width="60%"><br>在“当代愚公事迹墙”前，一组记录村民早年修山路、建水库的老照片引发实践团成员驻足。“这些影像生动诠释了愚公精神并非传说中的遥远故事，而是融入当地群众血脉的实干基因。”实践团成员娄烜赫表示，馆内丰富的史料让团队对“坚韧不拔、敢为人先”的愚公精神有了更具象的认知。<br><img src="https://b9edaf4.webp.li/docs/1756485460008.png" alt="" width="60%"><br><strong> 精神转化促振兴 乡村焕发新活力</strong><br>在村史馆“乡村振兴成果展区”，实践团成员重点调研了愚公村依托文化资源推动发展的创新路径。近年来，愚公村以“愚公移山”文化IP为核心，通过修复愚公故居、建设移山精神广场、开发民俗体验项目等举措，将“精神资源”转化为“文旅动能”，带动乡村旅游提质升级。数据显示，当地已培育农家乐、特色民宿20余家，年接待游客量持续增长，村民人均年收入较为乐观。<br>实践团观察发现，当地通过“文化+旅游+农业”的融合模式，既保护了传统文脉，又激活了乡村发展内生动力，为新时代乡村振兴提供了鲜活样本。<br><img src="https://b9edaf4.webp.li/docs/1756485468346.png" alt="" width="60%"><br><strong> 青春实践悟使命 续写移山新篇章</strong><br>走访结束后，实践团召开专题座谈会，围绕“愚公精神与乡村振兴”主题深入研讨。成员们一致认为，新时代愚公精神不仅是“咬定青山不放松”的坚韧品格，更包含“因地制宜谋发展”的创新智慧，其核心要义与乡村振兴战略中“产业兴旺、文化兴盛”的要求高度契合。<br><img src="https://b9edaf4.webp.li/docs/1754162260477.jpg" alt="" width="60%"><br>从传说中的“移山壮举”到现实中的“振兴图景”，愚公村村史馆不仅是一段历史的见证，更是一座连接传统与未来的精神桥梁。此次实践团的走访，不仅加深了对愚公精神时代价值的理解，更坚定了以青春之力助力乡村振兴的信念。未来，愚公智旅实践团将继续带着这份感悟，在乡村振兴的道路上续写属于新时代的“移山”故事！</p>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>资助宣讲入山乡 愚公村里暖民心</title>
      <link href="/2025/07/28/%E8%B5%84%E5%8A%A9%E5%AE%A3%E8%AE%B2%E5%85%A5%E5%B1%B1%E4%B9%A1-%E6%84%9A%E5%85%AC%E6%9D%91%E9%87%8C%E6%9A%96%E6%B0%91%E5%BF%83/"/>
      <url>/2025/07/28/%E8%B5%84%E5%8A%A9%E5%AE%A3%E8%AE%B2%E5%85%A5%E5%B1%B1%E4%B9%A1-%E6%84%9A%E5%85%AC%E6%9D%91%E9%87%8C%E6%9A%96%E6%B0%91%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><p>为响应贯彻国家资助政策号召，河南大学高级金融学院“云载愚光，智绘山乡”乡村振兴促进团奔赴王屋山愚公村，开展高校资助政策宣讲活动，将教育帮扶的种子播撒在乡村土地，用青春力量为乡村学子点亮求学希望。<br><img src="https://b9edaf4.webp.li/docs/1756563306599.png" alt="" width="60%"><br><strong> 实践启程 赋能乡村</strong><br>愚公村承载着“愚公移山”的精神基因，当地部分家庭对高校资助政策了解有限，存在“怕学费负担重、怕申请流程繁”的顾虑。实践团成员结合提前梳理的政策手册，用通俗易懂的语言，围绕国家奖助学金、助学贷款、勤工助学等核心内容展开讲解——从资助申请的时间节点、材料准备，到不同政策的覆盖范围、补贴标准，逐一拆解细节，确保家长和学生“听得懂、记得住、用得上”。<br><img src="https://b9edaf4.webp.li/docs/1756563455445.jpg" alt="" width="60%"><br><strong> 互动答疑 笃行不怠</strong><br>宣讲现场，实践团还设置了互动答疑环节。针对村民提出的“助学贷款如何还款”“成绩一般能否申请助学金”等问题，成员们结合真实案例耐心解答，消除大家的政策盲区。有村民感慨：“以前总担心孩子上大学花钱多，现在清楚了有这么多帮扶政策，心里的石头终于落地了！”<br><img src="https://b9edaf4.webp.li/docs/1756563306599.png" alt="" width="60%"><br>此次宣讲不仅是河南大学高级金融学院践行乡村振兴战略的具体行动，更是“云载愚光，智绘山乡”实践团以专业所长服务基层的生动体现。未来，实践团将持续聚焦乡村教育需求，通过政策宣讲、学业辅导等更多形式，架起高校与乡村的帮扶桥梁，让青春在助力乡村振兴的实践中绽放光彩。</p>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>扎根基层听民意，实践考察绘新篇</title>
      <link href="/2025/07/26/%E6%89%8E%E6%A0%B9%E5%9F%BA%E5%B1%82%E5%90%AC%E6%B0%91%E6%84%8F%EF%BC%8C%E5%AE%9E%E8%B7%B5%E8%80%83%E5%AF%9F%E7%BB%98%E6%96%B0%E7%AF%87/"/>
      <url>/2025/07/26/%E6%89%8E%E6%A0%B9%E5%9F%BA%E5%B1%82%E5%90%AC%E6%B0%91%E6%84%8F%EF%BC%8C%E5%AE%9E%E8%B7%B5%E8%80%83%E5%AF%9F%E7%BB%98%E6%96%B0%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><p>七月的济源，暑气与绿意交织。愚公智旅乡村振兴促进团的三下乡实践进入第二天，一场联结基层与山巅的行动正悄然展开：一面是愚公村的屋檐下，队员们俯身倾听村民心声，笔尖划过问卷纸的沙沙声里，藏着助力乡村发展的细致考量；另一面是王屋山的云雾中，队员们穿行在山石之间记录下宝贵的实践数据，共同勾勒着文旅融合的新路径。从田间地头到山巅云际，这支团队以青春之力，续写着新时代的 “愚公故事”。<br><img src="https://b9edaf4.webp.li/docs/1756562417524.png" alt="" width="60%"><br><strong> 扎根基层听民意，精进技术促服务</strong><br>7月25日上午，愚公智旅乡村振兴实践团6名成员参加愚公村村委组织的党员学习大会。会上，大家与村委党员一同深入学习党的理论成果。学习结束后，实践团向村民们发放了精心制作的《愚公村村情调查问卷》。这份问卷涵盖村庄基础设施、产业发展、文化传承等多个方面，旨在全面了解村民对家乡发展的真实看法和实际需求。通过收集到的宝贵意见，为后续助力愚公村建设提供更精准的方向。<br><img src="https://b9edaf4.webp.li/docs/1756562313917.png" alt="" width="60%"><br>与此同时，实践团4名技术组成员前往王屋山景区，参加了景区小程序运维专项培训。培训中，大家系统学习了小程序图片上传、内容更新以及日常运营管理等实用技能。接下来，他们将把所学运用到实际工作中，通过丰富小程序的内容，提升游客的使用体验。<br><img src="https://b9edaf4.webp.li/docs/1756562377092.png" alt="" width="60%"><br><strong> 登王屋山寻脉络，聚愚公智探征途</strong><br>晨光初染王屋山巅，愚公智旅团队整装出发。队员们背负设备，沿 “愚公移山” 传说中的路径向上，踏过青苔覆盖的石阶，耳畔是松涛与鸟鸣交织的交响。队员们用镜头捕捉云海漫过天坛峰的瞬间，用纸笔记录灵感涌现在脑海中的刹那。登山之旅的起点在王屋山脚下的“河南王屋山国家地质公园”。<br><img src="https://b9edaf4.webp.li/docs/1756562392198.png" alt="" width="60%"><br>本次考察是团队对王屋山的第一次考察，考察范围为王屋山的上半段。队员们先乘坐缆车到达半山腰，之后徒步向天坛峰顶发起冲击。沿途文案组用纸笔记录沿途的景观和路标等关键信息以便后期协助王屋山景区制作王屋山游玩攻略。媒体组则使用手中的相机留下大自然的鬼斧神工和队员的矫健身姿。技术组绘制了简略的地图，着重为小程序和网页的制作收集信息。在登山的途中，愚公智旅团队还进行了抖音平台的直播讲解，面向公众介绍“云载愚光，智绘山乡”的项目内容和项目目的以及王屋山的相关故事，也让大家以云游的方式欣赏了王屋山的美景。<br><img src="https://b9edaf4.webp.li/docs/1756562404399.png" alt="" width="60%"><br>下午五点，愚公智旅团队经过两小时的攀登成功登顶王屋山的天坛峰。登顶刹那，山风卷着云气扑在脸上。回望来时路，看着团队成员的身影叠着石阶的刻痕，忽然懂了 “愚公移山” 的深意 —— 不是移走山，是移走畏难的心。三下乡的意义也在此：我们带不走山，却能用并肩的脚印，为它留下新的可能。此刻山风里，有我们的喘息，更有生长的力量。<br><img src="https://b9edaf4.webp.li/docs/1756562722702.png" alt="" width="60%"><br>团队站在山巅回望。古有愚公移山志，今有智旅探路行 —— 王屋山的每一块岩石、每一段传说，都在我们的调研中，渐渐清晰为可触摸的文旅蓝图。暮色中下山时，队员们的背影与山影相融，恰似续写着新时代的 “移山” 故事 —— 以愚公之志丈量土地，用文旅智慧铺就山与城的联结之路。</p>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv12环境配置</title>
      <link href="/2025/07/25/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%9AYOLOv12%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2025/07/25/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%EF%BC%9AYOLOv12%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="YOLOv12环境配置"><a href="#YOLOv12环境配置" class="headerlink" title="YOLOv12环境配置"></a>YOLOv12环境配置</h1><blockquote><p>作者：zzy-swimming<br>指导：</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>#前言</li><li>#查看电脑状况</li><li>#安装所需软件<ul><li>#31-anaconda3安装</li><li>#32-pycharm安装</li></ul></li><li>#安装环境<ul><li>#41-安装cuda及cudnn<ul><li>#411-下载及安装cuda</li><li>#412-cudnn安装</li></ul></li><li>#42-创建虚拟环境</li><li>#43-下载yolov12源代码</li><li>#44-安装gpu版本<ul><li>#441-安装pytorchgpu版</li><li>#442-安装requirements</li><li>#443-安装flash-attention</li></ul></li><li>#45-安装cpu版本</li></ul></li><li>#5yolov12的使用及训练<ul><li>#51-pycharm导入环境</li><li>#52-验证环境</li></ul></li></ol><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在此之前，我对Anaconda，cudnn，cuda几乎一无所知。对pytorch的了解也只是知道它是一个深度学习库，并且对于GPU来讲，我只是知道存在这个东西。完成这个流程之后，我知道了GPU是电脑的显卡，负责大规模并行计算，速度很快。CUDA是让GPU能干通用计算(比如深度学习)的驱动和工具包。cuDNN是在CUDA基础上，专门为深度学习加速的算法库。PyTorch是一个流行的深度学习框架，使用它写代码，它可以调用底层的CUDA&#x2F;cuDNN和GPU。Anaconda是极好的环境管理工具，可以安装和管理PyTorch、CUDA等所有软件包，避免版本冲突。</p><h2 id="2-查看电脑状况"><a href="#2-查看电脑状况" class="headerlink" title="2. 查看电脑状况"></a>2. 查看电脑状况</h2><p>深度学习的训练对于电脑显卡要求较高，若电脑没有独立显卡(NVIDIA卡)或者是AMD的显卡无法使用GPU进行训练，需用CPU进行训练，会慢很多。若不清楚电脑有无显卡可以打开任务管理器，点击性能往下找GPU，就可以看到是否有独立显卡，不清楚是否为独立显卡则搜索型号。</p><p>若有独立显卡则安装GPU版本的pytorch，若无独立显卡则安装CPU版本的pytorch。</p><h2 id="3-安装所需软件"><a href="#3-安装所需软件" class="headerlink" title="3. 安装所需软件"></a>3. 安装所需软件</h2><p>推荐安装Anaconda3+Pycharm，都需要加入环境变量，会安装或者安装过了则跳过这一步骤。</p><h3 id="3-1-Anaconda3安装"><a href="#3-1-Anaconda3安装" class="headerlink" title="3.1 Anaconda3安装"></a>3.1 Anaconda3安装</h3><p>Anaconda3由于是国外网站下载较慢，推荐通过清华镜像源安装。</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>选择带有Anaconda3…Windows…exe字样的进行下载，下载完成之后打开Anaconda3进行安装，一直点下一步，选JustMe，安装路径不建议安装到c盘，可以直接复制粘贴修改到D:\Anaconda3，也可以修改到其他路径，最好纯英文路径。</p><p>点击下一步后，需要选择添加到环境变量，前三个一定要勾选，也可以全选。</p><p>点击install安装后耐心等待进度条满安装完成即可，进度较慢，耐心等待。</p><blockquote><p><strong>问题一</strong>: 因为miniconda的体量更小，我想着先下miniconda好了。下载之后，找miniconda navigator(anaconda navigator)这个启动极好的文件，在文件查找里死活找不到。最后还是把miniconda安装程序给删除掉了，安装了anaconda，anaconda navigator一查就有。</p></blockquote><h3 id="3-2-Pycharm安装"><a href="#3-2-Pycharm安装" class="headerlink" title="3.2 Pycharm安装"></a>3.2 Pycharm安装</h3><p>安装Pycharm可以直接去官网下载，速度较快。</p><p><a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a></p><p>往下拉下载第二个Community Edition社区免费版就可以。</p><p>下载完之后打开安装,点下一步,遇到选择路径修改路径到D盘或者其它除C盘外的文件夹，可以建个自己喜欢的英文名字。</p><p>点击下一步建议全选。</p><p>再点下一步，直接安装就可以了，耐心等待进度条满安装完成即可。</p><h2 id="4-安装环境"><a href="#4-安装环境" class="headerlink" title="4. 安装环境"></a>4. 安装环境</h2><h3 id="4-1-安装cuda及cudnn"><a href="#4-1-安装cuda及cudnn" class="headerlink" title="4.1 安装cuda及cudnn"></a>4.1 安装cuda及cudnn</h3><h4 id="4-1-1-下载及极好的安装cuda"><a href="#4-1-1-下载及极好的安装cuda" class="headerlink" title="4.1.1 下载及极好的安装cuda"></a>4.1.1 下载及极好的安装cuda</h4><p>在安装pytorch前需要安装cuda，(若无显卡或intel的显卡则跳过，直接看4.2)下载cuda前需要先查看显卡支持的CUDA版本最高是多少，按下win+r键，输入cmd，在打开的页面输入：<code>nvidia-smi</code>，即可查看。</p><p>[图片: nvidia-smi命令输出示例]</p><p>上图蓝框位置显示即为cuda最高支持版本，本教程cuda最高版本达到12.4即可，若没有达到则需要更新显卡驱动。</p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>在这个网站挑选下载</p><p>下载完之后运行安装,建议安装到默认路径,所以C盘需要留有20G以上的存储空间,一直点击下一步,点击自定义,然后全部勾选即可。</p><p>一直下一步，耐心等待安装完成。</p><p>安装完成后可以再次在cmd里输入命令：<code>nvcc -V</code>查看，如下显示即安装成功</p><p>[图片: nvcc -V命令输出示例]</p><h4 id="4-1-2-cudnn安装"><a href="#4-1-2-cudnn安装" class="headerlink" title="4.1.2 cudnn安装"></a>4.1.2 cudnn安装</h4><p>进入cudnn官网，选择合适版本的文件。</p><p><a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p><p>进入后在文件列表中选择cudnn版本与上面cuda安装相匹配的版本。</p><p>NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks.</p><p>下载Windows版本的压缩包文件</p><p>下载需要登录，将得到的压缩文件进行解压，解压后得到下图三个文件夹，</p><p>[图片: cudnn解压后的文件夹结构]</p><p>全选复制进cuda的文件夹中进行覆盖替换，替换完成后即cudnn安装完成。按照本文教程安装的cuda的文件夹默认在<code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4</code>目录下。</p><h3 id="4-2-创建虚拟环境"><a href="#4-2-创建虚拟环境" class="headerlink" title="4.2 创建虚拟环境"></a>4.2 创建虚拟环境</h3><p>按下Win键，输入anaconda prompt，打开下图所示的应用。</p><p>[图片: anaconda prompt应用图标]</p><p>默认进入的是base环境，base环境的版本与下载的anaconda3版本有关，因此不建议直接使用，需要新建环境，在新建环境之前建议更改默认的pip源和conda源可加速下载速度。</p><p>更改代码如下，直接输入即可，这里选择更换的是中科大源，建议使用，亲测完美运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/an极好的aconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><p>此时新建虚拟环境(需要关闭加速软件)，这里创建一个名为yolov12，python版本为3.11的虚拟环境,也可以修改为其他名,本文所用为python3.11,同时本教程所用pytorch源及python版本只支持 3.11。</p><blockquote><p><strong>问题二</strong>: 我自己电脑上的Python本来是python3.12。但是当时在做的过程中，我想着它还真能启动不了吗?那就试一试呗。结果在完成最后步骤的时候，一直无法启动成功。最终还是把python版本回退回来了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov12 python=3.11</span><br></pre></td></tr></table></figure><p>回车后出现新建环境提醒输入y继续，耐心等待全部下载完成后自动安装。</p><p>此时再次输入命令新建yolov12环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov12 python=3.11</span><br></pre></td></tr></table></figure><p>创建完之后输入如下命令进入yolov12环境，之后所有的操作，包括但不限于库的安装修改、代码运行都在该环境中。</p><p>此时有NVIDIA显卡安装GPU版看4.3，其它需要安装CPU版看极好的4.4。无CPU我不确定能不能使用FlashAttention，目前我了解到的flash-attention库下载全部需要cuda。</p><h3 id="4-3-下载YOLOv12源代码"><a href="#4-3-下载YOLOv12源代码" class="headerlink" title="4.3 下载YOLOv12源代码"></a>4.3 下载YOLOv12源代码</h3><p>YOLOv12源码地址</p><p><a href="https://github.com/sunsmarterjie/yolov12">https://github.com/sunsmarterjie/yolov12</a></p><p>点进去下载代码，看到main下载即可。</p><p>下完完成将文件夹解压即可，建议C盘以外的不带中文路径的文件夹中(我的是F:\yolov12)。</p><h3 id="4-4-安装GPU版本"><a href="#4-4-安装GPU版本" class="headerlink" title="4.4 安装GPU版本"></a>4.4 安装GPU版本</h3><h4 id="4-4-1-安装pytorch-GPU版"><a href="#4-4-1-安装pytorch-GPU版" class="headerlink" title="4.4.1 安装pytorch(GPU版)"></a>4.4.1 安装pytorch(GPU版)</h4><p>打开prompt输入<code>conda activate yolov12</code>进入yolov12环境，之后输入下方命令即可安装pytorch,耐心等待安装完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu124</span><br></pre></td></tr></table></figure><blockquote><p><strong>问题三</strong>: 下载这个需要科学上网,也就是需要VPN。我当时用的是维多利亚大学的VPN,但是维多利亚大学的VPN会给你限流，显示的是让我全部下载下来需要25个小时还要多。我想的是，能不用网盘里的东西就不用，我想自己弄嘛。我就暂停了它的下载过程，就CTRL+C强制暂停嘛。然后当我找到了加速器在进行下载的时候，出现了问题，死活下载不了了。</p><p>[图片: 下载错误截图]</p><p>但是我知道PIP这个命令它是有自动重试机制的，然后我就询问AI接下来我应该怎么做。AI分析了我出现的四个问题，第一个问题是网络问题导致下载超时。第二个问题是用户取消操作，第三个问题是PiP的自动重试机制，第四个问题是最终失败文件被占用。然后我就删除了电脑的缓存文件，并进行了重启。而且还使用了加速器，再接着下载之后依然是这个界面。不得已那就先用网盘吧。</p></blockquote><p>torch及相关库比较大,需要耐心等待下载完之后出现 done则安装完成,注意需要下载torch-2.4.1，然后通过pip install安装本地文件的方式安装，可以参考下图的方式，将torch放入f盘的test文件夹下，通过cd将文件目录跳转，再输入如下指令。(torch-2.4.0运行有bug，安装torch-2.4.1)(只支持python3.11版本，其余版本无法安装)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch-2.4.1+cu124-cp311-cp311-win_amd64.whl</span><br></pre></td></tr></table></figure><p>耐心等待安装完成后,再输入下面的指令通过pip安装其余库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/cu124</span><br></pre></td></tr></table></figure><h4 id="4-4-2-安装requirements"><a href="#4-4-2-安装requirements" class="headerlink" title="4.4.2 安装requirements"></a>4.4.2 安装requirements</h4><p>需要安装requirements,这里找到yolov12这个文件夹内的requirements文件直接修改就行</p><p>将下面的内容复制到requirements.txt中保存</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#torch==2.2.2</span><br><span class="line">#torchvision==0.17.2</span><br><span class="line">#flash_attn-2.7.3+cu11torch2.2cxx11abiFALSE-cp311-cp311-linux_x86_64.whl</span><br><span class="line">timm==1.0.14</span><br><span class="line">albumentations==2.0.4</span><br><span class="line">onnx==1.14.0</span><br><span class="line">onnxruntime==1.15.1</span><br><span class="line">pycocotools==2.0.7</span><br><span class="line">PyYAML==6.0.1</span><br><span class="line">scipy==1.13.0</span><br><span class="line">onnxslim==0.1.31</span><br><span class="line">onnxruntime-gpu==1.18.0</span><br><span class="line">gradio==4.44.1</span><br><span class="line">opencv-python==4.9.0.80</span><br><span class="line">psutil==5.9.8</span><br><span class="line">py-cpuinfo==9.0.0</span><br><span class="line">huggingface-hub==0.23.2</span><br><span class="line">safetensors==0.4.3</span><br><span class="line">numpy==1.26.4</span><br><span class="line">thop</span><br></pre></td></tr></table></figure><p>需要将路径修改为yolov12的路径，此时应该cd进入yolov12这个文件夹，也就是在相对路径下输入此命令，可以参考下图，需要先修改所需库，然后输入以下命令后耐心等待即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(yolov12) F:\&gt;<span class="built_in">cd</span> yolov12</span><br><span class="line">(yolov12) F:\yolov12&gt;pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>然后输入下列指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>出现下图则环境配置完成。</p><p>[图片: 安装成功截图]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Requirement already satisfied: networkx in c:\users\z&#x27;z&#x27;y\,conda\envs\yolo 2\lib\site-packages(from torch-&gt;timm==1.0.14-&gt;-r requirements.txt(line 4(3.5)Installing collected packages: defusedxml, supervision Successfully installed defusedxml-0.7.1 supervision-0.22.0</span><br></pre></td></tr></table></figure><p>使用yolov12-main，v1.0与30系以下显卡不兼容，无法训练验证模型</p><h4 id="4-4-3-安装flash-attention"><a href="#4-4-3-安装flash-attention" class="headerlink" title="4.4.3 安装flash-attention"></a>4.4.3 安装flash-attention</h4><p>除了这些之外，还需要安装flash-attention，对于版本的选择也比较麻烦，网站如下</p><p>Windows: <a href="https://github.com/bdashore3/flash-attention/releases">https://github.com/bdashore3/flash-attention/releases</a></p><p>Linux: <a href="https://github.com/Dao-AILab/flash-attention/releases">https://github.com/Dao-AILab/flash-attention/releases</a></p><p>windows系统的版本我选择了2.7.0post2</p><p>下载完成之后需要本地安装，复制极好的到yolov12文件夹中，cd到yolov12文件夹后输入如下指令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(yolov12) F:\yolov12&gt;pip install flash_attn-2.7.0.post2+cu124torch2.4.0cxx11abiFALSE-cp311-cp311-win_amd64.whl</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flash_attn-2.7.0.post2+cul24torch2.4.0cxx11abiFALSE-cp311-cp311-win_amd64.whl</span><br></pre></td></tr></table></figure><h3 id="4-5-安装CPU版本"><a href="#4-5-安装CPU版本" class="headerlink" title="4.5 安装CPU版本"></a>4.5 安装CPU版本</h3><p>直接将requirements.txt打开后以下面的内容替换</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">torch==2.2.2</span><br><span class="line">torchvision==0.17.2</span><br><span class="line">#flash_attn-2.7.3+cul1torch2.2cxx11abiFALSE-cp311-cp311-linux_x86_64.whl</span><br><span class="line">timm==1.0.14</span><br><span class="line">albumentations==2.0.4</span><br><span class="line">onnx==1.14.0</span><br><span class="line">onnxruntime==1.15.1</span><br><span class="line">pycocotools==2.0.7</span><br><span class="line">PyYAML==6.0.1</span><br><span class="line">scipy==1.13.0</span><br><span class="line">onnxslim==0.1.31</span><br><span class="line">onn极好的xruntime-gpu==1.18.0</span><br><span class="line">gradio==4.44.1</span><br><span class="line">opencv-python==4.9.极好的0.80</span><br><span class="line">psutil==5.9.8</span><br><span class="line">py-cpuinfo==9.0.0</span><br><span class="line">huggingface-hub==0.23.2</span><br><span class="line">safetensors==0.4.极好的3</span><br><span class="line">numpy==1.26.4</span><br><span class="line">thop</span><br></pre></td></tr></table></figure><p>然后在 yolov12路径下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>耐心等待安装完成</p><h2 id="5-YOLOv12的使用及训练"><a href="#5-YOLOv12的使用及训练" class="headerlink" title="5. YOLOv12的使用及训练"></a>5. YOLOv12的使用及训练</h2><h3 id="5-1-pycharm导入环境"><a href="#5-1-pycharm导入环境" class="headerlink" title="5.1 pycharm导入环境"></a>5.1 pycharm导入环境</h3><p>下载完成之后解压到D盘或其它盘文件夹内,此时点击yolov12文件夹鼠标右键文件夹通过pycharm打开,打开后需要配置虚拟环境,新版pycharm可选中文语言,点击文件-设置,点击项目:yolov12,点击python解释器,点击右边添加解释器-添加本地解释器，选现有.</p><p>按照下图方式选择就可以，这里一定看清楚。</p><p>[图片: pycharm环境配置界面]</p><p>选择python，接着选择刚刚添加的yolov12环境，选择python.exe，</p><p>如果找不到环境所在位置，可以输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><p>查看环境所在位置</p><p>[图片: conda env list命令输出]</p><p>并寻找后选择python.exe。</p><p>下图为环境正在加载，耐心等待完成即可，等待环境加载完成即可运行代码。</p><p>[图片: pycharm环境加载中]</p><h3 id="5-2-验证环境"><a href="#5-2-验证环境" class="headerlink" title="5.2 验证环境"></a>5.2 验证环境</h3><p>新建一个yolov12_predict.py,在文件中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载预训练的 YOLOv12n模型</span></span><br><span class="line">model = YOLO(<span class="string">&#x27;yolov12n.pt&#x27;</span>)</span><br><span class="line">source = <span class="string">&#x27;#####.jpg&#x27;</span>  <span class="comment">#更改为自己的图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行推理,并附加参数</span></span><br><span class="line">model.predict(source, save=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>pycharm中新建python文件的方式如下</p><p>[图片: pycharm新建文件界面]</p><p>在左侧框的位置右键，然后鼠标移动到新建-python文件，输入python文件名，然后输入yolov12_predict即可。</p><p>或者通过命令行的方式运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo predict model=yolov12n.pt <span class="built_in">source</span>=<span class="string">&#x27;cat.jpg&#x27;</span></span><br></pre></td></tr></table></figure><p>输入下图类似的则环境配置完成</p><p>[图片: 验证成功输出]</p><p>CPU处理结果:</p><p>[图片: CPU处理结果]</p><p>GPU处理结果:</p><p>[图片: GPU处理结果]</p>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>青春智旅叩洞天 愚光新火绘山乡</title>
      <link href="/2025/07/25/%E9%9D%92%E6%98%A5%E6%99%BA%E6%97%85%E5%8F%A9%E6%B4%9E%E5%A4%A9-%E6%84%9A%E5%85%89%E6%96%B0%E7%81%AB%E7%BB%98%E5%B1%B1%E4%B9%A1/"/>
      <url>/2025/07/25/%E9%9D%92%E6%98%A5%E6%99%BA%E6%97%85%E5%8F%A9%E6%B4%9E%E5%A4%A9-%E6%84%9A%E5%85%89%E6%96%B0%E7%81%AB%E7%BB%98%E5%B1%B1%E4%B9%A1/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><p><strong> 团队介绍</strong><br>在河南大学高级金融学院和国际（欧美）理工学院活跃一支充满青春活力担当专业使命的队伍——愚公智旅乡村振兴实践团。为深入学习贯彻习近平新时代中国特色社会主义思想，全面学习贯彻习近平总书记关于青年工作的重要思想和习近平总书记关于教育的重要论述，这支队伍积极响应校团委关于“青春为中国式现代化挺膺担当”的号召，来到河南省济源市王屋镇开展三下乡实践活动。<br><img src="https://b9edaf4.webp.li/docs/1756483962462.png" alt="" width="60%"><br>“愚公”是对愚公移山精神的传承，智旅即智慧文旅，是本次项目的目的。在这里愚公智旅团队将运用经济领域专业知识与计算机领域科学技术帮助王屋镇在乡村振兴的新时代跑道勇往直前。团队共有10人，其中国际经济与贸易专业6人，计算机科学与技术专业4人。10名队员按照特长分为了三个组，三个小组紧密协作，从过程记录、理念传播、资源保障三个维度共同发力，为后续活动的顺利实施提供了有力支撑。</p><h4>文案组</h4>文案组由娄烜赫，李金谦和叶智珺三名队员组成，主要负责文案的撰写和排版，同时负责运营团队的微信公众号。<img src="https://b9edaf4.webp.li/docs/1756484065676.png" alt="" width="60%"><h4>摄影组</h4>杜铭玥，吕美琪和李宜卿组成的摄影组携带专业设备，负责日常拍摄工作，同时运营团队的抖音，小红书和微信视频号<img src="https://b9edaf4.webp.li/docs/1756484163295.png" alt="" width="60%"><h4>技术组</h4>张子垚，田烨，李佳琳和贾茜蓓四位计算机科学与技术专业的队员强强联手组成技术组，负责小程序和网页的开发工作，同时负责解决团队遇到的技术性问题。<img src="https://b9edaf4.webp.li/docs/1756484218064.png" alt="" width="60%"><strong> 实践准备</strong><h4>前期会议</h4>云载愚光，智绘山乡！河南大学“愚公智旅乡村振兴实践团“正式启程！这支由10名来自国际经济与贸易、计算机科学与技术专业优秀学子组成的队伍，将联合王屋山风景名胜区，深入济源市王屋镇愚公村，开展智慧文旅主题的暑期“三下乡”实践活动。为高效推进实践任务，实践团前期已召开两次筹备会议，搭建起清晰的团队架构，并通过专业化分工与模块化协作，为本次活动打下坚实基础。<img src="https://b9edaf4.webp.li/docs/1756484314020.png" alt="" width="60%">为保障实践项目顺利推进，“愚公智旅”实践队成员分别前往济源市王屋镇愚公村党群服务中心和王屋山景区服务中心举行座谈会，就村子发展问题和景区前景与愚公村村委和王屋山景区管理层进行了深入对接，建立了规范高效的沟通协作机制。<img src="https://b9edaf4.webp.li/docs/1756484325728.png" alt="" width="60%">实践团严格遵循“事前请示、事中汇报、事后总结”的原则，通过常态化的沟通和精细化的对接，确保村委和景区管理层的指导意见落到实处。队员们与村委和领导共同梳理了实践活动的目标和流程，明确了各环节要点，并重点就活动安全做出了强调。所有对接过程均有详细记录，为后续工作的复盘与优化提供了清晰依据，为活动的安全、有序推进奠定了坚实基础。<p><strong> 物资准备</strong><br>工欲善其事，必先利其器。愚公智旅乡村文旅振兴促进团紧扣调研、宣传、服务等需求，筹备了丰富实用的物资。定制了象征“愚公精神”与团队使命的队旗、统一队服，传递“云载愚光，智绘山乡”的理念。同时，配备了专业的摄影摄像设备，确保能够清晰、生动地记录下乡调研、文化挖掘、志愿服务、乡村风光等每一个珍贵瞬间，为后期宣传与成果总结积累丰富素材。围绕王屋山文旅资源现状、村民发展诉求、游客体验反馈等核心议题，团队设计并印制了多套调研问卷与访谈提纲。这些工具将为评估活动实效、提出切实的振兴建议提供数据基础。考虑到实地工作需求，团队还准备了常用药品、防暑降温用品、以及用于与村民沟通、记录问题的笔记本、宣传折页等，确保工作安全，服务到位。<br><img src="https://b9edaf4.webp.li/docs/1756405714723.jpg" alt="" width="60%"><br><strong> 壮志出征</strong><br>出征仪式上，愚公智旅乡村文旅振兴促进团全体10名队员精神抖擞，整装集结！在王屋山景区的“第一洞天”牌坊下，队员们合影留念，齐声高喊“云载愚光，智绘山乡”，洪亮的口号，喊出我们助力乡村文旅振兴的坚定决心！愚公精神指引，团队能量满满，振兴征程，正式启航！<br><img src="https://b9edaf4.webp.li/docs/1756484353344.png" alt="" width="60%"><br>愚公智旅，出发！</p>]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>愚公智旅乡村文旅振兴促进团整装待发</title>
      <link href="/2025/06/29/%E6%84%9A%E5%85%AC%E6%99%BA%E6%97%85%E4%B9%A1%E6%9D%91%E6%96%87%E6%97%85%E6%8C%AF%E5%85%B4%E4%BF%83%E8%BF%9B%E5%9B%A2%E6%95%B4%E8%A3%85%E5%BE%85%E5%8F%91/"/>
      <url>/2025/06/29/%E6%84%9A%E5%85%AC%E6%99%BA%E6%97%85%E4%B9%A1%E6%9D%91%E6%96%87%E6%97%85%E6%8C%AF%E5%85%B4%E4%BF%83%E8%BF%9B%E5%9B%A2%E6%95%B4%E8%A3%85%E5%BE%85%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[视频内嵌代码]</div><style>.video-container { position: relative; padding-top: 56.25%; } .video-container iframe { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style> --><div style="text-align: center;">盛夏蝉鸣起，青春正当时！</div><div style="text-align: center;">“愚公智旅”乡村文旅振兴促进团 </div><div style="text-align: center;">全员已完成集结， </div><div style="text-align: center;">从翻动的书页间汲取知识   </div><div style="text-align: center;">到奔赴乡土间践行理想   </div><div style="text-align: center;">每一个足迹都承载着热爱与期待 </div><div style="text-align: center;"> 让我们一睹他们的准备风采！ </div><p><strong> 凝聚智慧，共商大计</strong><br><span style="display: inline-block; width: 80px; height: 24px; background-color: #0a9851ff; color: white; text-align: center; line-height: 24px; border-radius: 2px; margin-right: 10px;">精神充电</span><br>团队开展专题学习会，深入研读《乡村振兴战略纲要》，从“愚公移山”精神中汲取力量，明确用智慧文旅赋能乡村的使命。<br><span style="display: inline-block; width: 80px; height: 24px; background-color: #0a9851ff; color: white; text-align: center; line-height: 24px; border-radius: 2px; margin-right: 10px;">安全护航</span><br>集中学习交通安全、应急救护等知识，为每位成员购买专项保险，还制定了详细的突发事件应急预案，确保成员们的安全得到保障。<br><img src="https://b9edaf4.webp.li/docs/1757055883871.jpg" alt="" width="60%"><br><strong> 精心筹备，亮点满满</strong></p><div style="text-align: center;"> 积极参加出征仪式 </div>在出征仪式上，团队成员李宜卿作为代表主持发言，通过精彩的展示，展现出了“愚公智旅”团队强大的社会实践决心。<img src="https://b9edaf4.webp.li/docs/1757055916341.jpg" alt="" width="60%"><img src="https://b9edaf4.webp.li/docs/1757055924130.jpg" alt="" width="60%"><div style="text-align: center;"> 搭建联络通信桥梁 </div>团队成员积极通过微信、电话等联系方式，同济源市王屋山风景名胜区管理人员进行沟通，并得到当地村委会大力支持。<div style="text-align: center;"> 指导老师鼎力支持</div>在三下乡的逐梦之旅中，每一个脚印都镌刻着成长的印记，而这一路的璀璨星光，离不开指导老师的悉心指引与全力支持。筹备阶段，张霞老师与我们并肩作战。从活动方案的反复打磨，到物资筹备的细致规划；从安全预案的严谨推敲，到团队分工的科学安排，老师以丰富的经验和专业的视角，为我们的实践活动筑牢根基。每一个创意的迸发，都有老师的鼓励与引导；每一处细节的疏漏，都有老师的耐心指正。<strong> 精心筹备，亮点满满</strong>当三下乡的号角穿透夏日的蝉鸣，愚公智旅乡村文旅振兴促进团已整装待发！我们将化身文化的传播者，深挖乡村古老传说、传统技艺，让隐匿于山水间的宝藏故事“活”起来；变身创意的设计师，用镜头定格村落美景，为古朴村落注入流量密码。行囊满载热忱，脚步丈量希望。这一程，我们以“智”为笔，以“旅”为墨，在乡村画卷上勾勒文旅振兴的崭新篇章。精彩即将启幕，邀你一同见证！]]></content>
      
      
      <categories>
          
          <category> 三下乡 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
